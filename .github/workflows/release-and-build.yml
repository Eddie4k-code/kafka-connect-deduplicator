name: Build, Tag, and Release Maven Project

on:
  push:
    branches:
      - master  # Trigger workflow on pushes to the `main` branch
    # or use 'pull_request' if you want to create tags on PR merges


permissions:
  contents: write 
  issues: write    
  pull-requests: write  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Navigate to the project directory
      run: cd duplicate-message-detector-kafka-connect-custom-smt

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('duplicate-message-detector-kafka-connect-custom-smt/**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: |
        cd duplicate-message-detector-kafka-connect-custom-smt
        mvn clean package
    - name: Archive JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app-artifact
        path: duplicate-message-detector-kafka-connect-custom-smt/target/*.jar

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: my-app-artifact
        path: duplicate-message-detector-kafka-connect-custom-smt/target/*.jar
      


    - name: Get the latest tag
      id: get_tag
      run: |
        # Fetch all remote tags
        latest_tag=$(git ls-remote --tags origin | awk -F'/' '{print $3}' | sort -V | tail -n 1)
        
        # Check if the latest_tag is empty (meaning no tags exist)
        if [ -z "$latest_tag" ]; then
          new_tag="1.0.0"  # Default tag when no tags exist
        else
          # Extract the version parts (major, minor, patch) from the latest tag
          version_parts=(${latest_tag//./ })
          patch_version=${version_parts[2]}
          new_patch_version=$((patch_version + 1))
          new_tag="v${version_parts[0]}.${version_parts[1]}.$new_patch_version"
        fi
        
        # Output the new tag
        echo "New tag: $new_tag"
        
        # Set the new tag as an environment variable for future steps
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    

    - name: Tag and Push
      run: |
        cd duplicate-message-detector-kafka-connect-custom-smt
        
        # Create the new tag
        git tag "$new_tag"
        
        # Push the new tag to the remote repository
        git push origin "$new_tag"
      env:
        new_tag: ${{ env.new_tag }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.new_tag }}
        files: duplicate-message-detector-kafka-connect-custom-smt/target/*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
